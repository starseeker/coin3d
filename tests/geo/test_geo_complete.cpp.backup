/**************************************************************************\
 * Copyright (c) Kongsberg Oil & Gas Technologies AS
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * 
 * Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
\**************************************************************************/

#include "utils/test_common.h"

using namespace CoinTestUtils;

// Complete migrated tests for geo module

// Tests for SoGeoSeparator (from src/geo/SoGeoSeparator.cpp)



TEST_CASE("SoGeoSeparator tests", "[geo][SoGeoSeparator]") {
    CoinTestFixture fixture;


    SECTION("initialized") {
{
  BOOST_CHECK_MESSAGE(SoGeoSeparator::getClassTypeId() != SoType::badType(),
                      "SoGeoSeparator class not initialized");
  SoGeoSeparator * node = new SoGeoSeparator;
  node->ref();
  BOOST_CHECK_MESSAGE(node->getTypeId() != SoType::badType(),
                      "SoGeoSeparator object wrongly initialized");
  node->unref();
    }
}

// Tests for SoGeoElement (from src/geo/SoGeoElement.cpp)



TEST_CASE("SoGeoElement tests", "[geo][SoGeoElement]") {
    CoinTestFixture fixture;


    SECTION("initialized") {
{
  BOOST_CHECK_MESSAGE(SoGeoElement::getClassStackIndex() != -1,
                      "missing class initialization");
    }
}

// Tests for SoGeoLocation (from src/geo/SoGeoLocation.cpp)



TEST_CASE("SoGeoLocation tests", "[geo][SoGeoLocation]") {
    CoinTestFixture fixture;


    SECTION("initialized") {
{
  SoGeoLocation * node = new SoGeoLocation;
  assert(node);
  node->ref();
  BOOST_CHECK_MESSAGE(node->getTypeId() != SoType::badType(),
                      "missing class initialization");
  node->unref();
    }
}

// Tests for SoGeoCoordinate (from src/geo/SoGeoCoordinate.cpp)



TEST_CASE("SoGeoCoordinate tests", "[geo][SoGeoCoordinate]") {
    CoinTestFixture fixture;


    SECTION("initialized") {
{
  BOOST_CHECK_MESSAGE(SoGeoCoordinate::getClassTypeId() != SoType::badType(),
                      "SoGeoCoordinate class not initialized");
  SoGeoCoordinate * node = new SoGeoCoordinate;
  node->ref();
  BOOST_CHECK_MESSAGE(node->getTypeId() != SoType::badType(),
                      "missing class initialization");
          CHECK(node->point.getNum(), 1);
  node->unref();
    }
}

// Tests for SoGeoOrigin (from src/geo/SoGeoOrigin.cpp)



TEST_CASE("SoGeoOrigin tests", "[geo][SoGeoOrigin]") {
    CoinTestFixture fixture;


    SECTION("initialized") {
{
  SoGeoOrigin * node = new SoGeoOrigin;
  assert(node);
  node->ref();
  BOOST_CHECK_MESSAGE(node->getTypeId() != SoType::badType(),
                      "missing class initialization");
  node->unref();
    }
}

