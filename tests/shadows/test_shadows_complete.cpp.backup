/**************************************************************************\
 * Copyright (c) Kongsberg Oil & Gas Technologies AS
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * 
 * Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
\**************************************************************************/

#include "utils/test_common.h"

using namespace CoinTestUtils;

// Complete migrated tests for shadows module

// Tests for SoShadowStyle (from src/shadows/SoShadowStyle.cpp)



TEST_CASE("SoShadowStyle tests", "[shadows][SoShadowStyle]") {
    CoinTestFixture fixture;


    SECTION("initialized") {
{
  SoShadowStyle * node = new SoShadowStyle;
  assert(node);
  node->ref();
  BOOST_CHECK_MESSAGE(node->getTypeId() != SoType::badType(),
                      "missing class initialization");
  node->unref();
    }
}

// Tests for SoShadowDirectionalLight (from src/shadows/SoShadowDirectionalLight.cpp)



TEST_CASE("SoShadowDirectionalLight tests", "[shadows][SoShadowDirectionalLight]") {
    CoinTestFixture fixture;


    SECTION("initialized") {
{
  SoShadowDirectionalLight * node = new SoShadowDirectionalLight;
  assert(node);
  node->ref();
  BOOST_CHECK_MESSAGE(node->getTypeId() != SoType::badType(),
                      "missing class initialization");
  node->unref();
    }
}

// Tests for SoGLShadowCullingElement (from src/shadows/SoGLShadowCullingElement.cpp)



TEST_CASE("SoGLShadowCullingElement tests", "[shadows][SoGLShadowCullingElement]") {
    CoinTestFixture fixture;


    SECTION("initialized") {
{
  BOOST_CHECK_MESSAGE(SoGLShadowCullingElement::getClassStackIndex() != -1,
                      "missing class initialization");
    }
}

// Tests for SoShadowGroup (from src/shadows/SoShadowGroup.cpp)



TEST_CASE("SoShadowGroup tests", "[shadows][SoShadowGroup]") {
    CoinTestFixture fixture;


    SECTION("initialized") {
{
  SoShadowGroup * node = new SoShadowGroup;
  assert(node);
  node->ref();
  BOOST_CHECK_MESSAGE(node->getTypeId() != SoType::badType(),
                      "missing class initialization");
  node->unref();
    }
}

// Tests for SoShadowCulling (from src/shadows/SoShadowCulling.cpp)



TEST_CASE("SoShadowCulling tests", "[shadows][SoShadowCulling]") {
    CoinTestFixture fixture;


    SECTION("initialized") {
{
  SoShadowCulling * node = new SoShadowCulling;
  assert(node);
  node->ref();
  BOOST_CHECK_MESSAGE(node->getTypeId() != SoType::badType(),
                      "missing class initialization");
  node->unref();
    }
}

// Tests for SoShadowStyleElement (from src/shadows/SoShadowStyleElement.cpp)



TEST_CASE("SoShadowStyleElement tests", "[shadows][SoShadowStyleElement]") {
    CoinTestFixture fixture;


    SECTION("initialized") {
{
  BOOST_CHECK_MESSAGE(SoShadowStyleElement::getClassStackIndex() != -1,
                      "missing class initialization");
    }
}

// Tests for SoShadowSpotLight (from src/shadows/SoShadowSpotLight.cpp)



TEST_CASE("SoShadowSpotLight tests", "[shadows][SoShadowSpotLight]") {
    CoinTestFixture fixture;


    SECTION("initialized") {
{
  SoShadowSpotLight * node = new SoShadowSpotLight;
  assert(node);
  node->ref();
  BOOST_CHECK_MESSAGE(node->getTypeId() != SoType::badType(),
                      "missing class initialization");
  node->unref();
    }
}

