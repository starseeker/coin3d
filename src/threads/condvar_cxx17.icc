/**************************************************************************\
 * Copyright (c) Kongsberg Oil & Gas Technologies AS
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * 
 * Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
\**************************************************************************/

/*!
  \file condvar_cxx17.icc
  \brief C++17 condition variable implementation replacing platform-specific pthread/win32 code
  
  This file provides portable C++17 condition variable implementation using std::condition_variable,
  eliminating the need for separate pthread and win32 implementations.
*/

/* This file should only be included from condvar.cpp */

#include <condition_variable>
#include <memory>
#include <chrono>
#include "threads/mutexp.h"  // For cc_mutex structure definition

static int
internal_condvar_struct_init(cc_condvar * condvar_struct)
{
  try {
    // Create a new std::condition_variable and store it
    auto std_condvar = std::make_unique<std::condition_variable>();
    condvar_struct->cxx17.condvar_ptr = std_condvar.release();
    return CC_OK;
  }
  catch (const std::exception& e) {
    if (COIN_DEBUG)
      cc_debugerror_post("internal_condvar_struct_init", "std::condition_variable creation error: %s\n", e.what());
    return CC_ERROR;
  }
}

static int
internal_condvar_struct_clean(cc_condvar * condvar_struct)
{
  try {
    if (condvar_struct->cxx17.condvar_ptr) {
      std::condition_variable* std_condvar = static_cast<std::condition_variable*>(condvar_struct->cxx17.condvar_ptr);
      delete std_condvar;
      condvar_struct->cxx17.condvar_ptr = nullptr;
    }
    return CC_OK;
  }
  catch (const std::exception& e) {
    if (COIN_DEBUG)
      cc_debugerror_post("internal_condvar_struct_clean", "std::condition_variable cleanup error: %s\n", e.what());
    return CC_ERROR;
  }
}

static int
internal_condvar_wait(cc_condvar * condvar, cc_mutex * mutex)
{
  try {
    if (!condvar->cxx17.condvar_ptr) {
      if (COIN_DEBUG)
        cc_debugerror_post("internal_condvar_wait", "condvar pointer is null\n");
      return CC_ERROR;
    }
    
    if (!mutex->cxx17.mutex_ptr) {
      if (COIN_DEBUG)
        cc_debugerror_post("internal_condvar_wait", "mutex pointer is null\n");
      return CC_ERROR;
    }
    
    std::condition_variable* std_condvar = static_cast<std::condition_variable*>(condvar->cxx17.condvar_ptr);
    std::mutex* std_mutex = static_cast<std::mutex*>(mutex->cxx17.mutex_ptr);
    
    // Create a unique_lock for the condition variable wait
    std::unique_lock<std::mutex> lock(*std_mutex, std::adopt_lock);
    std_condvar->wait(lock);
    
    // Release the lock so the mutex remains locked for the caller
    lock.release();
    
    return CC_OK;
  }
  catch (const std::exception& e) {
    if (COIN_DEBUG)
      cc_debugerror_post("internal_condvar_wait", "std::condition_variable wait error: %s\n", e.what());
    return CC_ERROR;
  }
}

static int
internal_condvar_timed_wait(cc_condvar * condvar, cc_mutex * mutex, double period)
{
  try {
    if (!condvar->cxx17.condvar_ptr) {
      if (COIN_DEBUG)
        cc_debugerror_post("internal_condvar_timed_wait", "condvar pointer is null\n");
      return CC_ERROR;
    }
    
    if (!mutex->cxx17.mutex_ptr) {
      if (COIN_DEBUG)
        cc_debugerror_post("internal_condvar_timed_wait", "mutex pointer is null\n");
      return CC_ERROR;
    }
    
    std::condition_variable* std_condvar = static_cast<std::condition_variable*>(condvar->cxx17.condvar_ptr);
    std::mutex* std_mutex = static_cast<std::mutex*>(mutex->cxx17.mutex_ptr);
    
    // Create a unique_lock for the condition variable wait
    std::unique_lock<std::mutex> lock(*std_mutex, std::adopt_lock);
    
    // Convert period to std::chrono duration
    auto timeout_duration = std::chrono::duration<double>(period);
    
    // Use wait_for with the timeout
    auto wait_result = std_condvar->wait_for(lock, timeout_duration);
    
    // Release the lock so the mutex remains locked for the caller
    lock.release();
    
    if (wait_result == std::cv_status::timeout) {
      return CC_TIMEOUT;
    } else {
      return CC_OK;
    }
  }
  catch (const std::exception& e) {
    if (COIN_DEBUG)
      cc_debugerror_post("internal_condvar_timed_wait", "std::condition_variable timed_wait error: %s\n", e.what());
    return CC_ERROR;
  }
}

static int
internal_condvar_wake_one(cc_condvar * condvar)
{
  try {
    if (!condvar->cxx17.condvar_ptr) {
      if (COIN_DEBUG)
        cc_debugerror_post("internal_condvar_wake_one", "condvar pointer is null\n");
      return CC_ERROR;
    }
    
    std::condition_variable* std_condvar = static_cast<std::condition_variable*>(condvar->cxx17.condvar_ptr);
    std_condvar->notify_one();
    return CC_OK;
  }
  catch (const std::exception& e) {
    if (COIN_DEBUG)
      cc_debugerror_post("internal_condvar_wake_one", "std::condition_variable notify_one error: %s\n", e.what());
    return CC_ERROR;
  }
}

static int
internal_condvar_wake_all(cc_condvar * condvar)
{
  try {
    if (!condvar->cxx17.condvar_ptr) {
      if (COIN_DEBUG)
        cc_debugerror_post("internal_condvar_wake_all", "condvar pointer is null\n");
      return CC_ERROR;
    }
    
    std::condition_variable* std_condvar = static_cast<std::condition_variable*>(condvar->cxx17.condvar_ptr);
    std_condvar->notify_all();
    return CC_OK;
  }
  catch (const std::exception& e) {
    if (COIN_DEBUG)
      cc_debugerror_post("internal_condvar_wake_all", "std::condition_variable notify_all error: %s\n", e.what());
    return CC_ERROR;
  }
}