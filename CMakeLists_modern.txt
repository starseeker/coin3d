# Modern CMake build system for Coin3D
# Simplified and modernized replacement for the legacy CMake system
cmake_minimum_required(VERSION 3.16...3.31)

# Project definition with semantic versioning
project(Coin
    VERSION 4.0.5
    DESCRIPTION "A high-level 3D visualization library with Open Inventor 2.1 API"
    LANGUAGES C CXX
)

# Modern CMake policies
if(POLICY CMP0077)
    cmake_policy(SET CMP0077 NEW)  # option() honors normal variables
endif()
if(POLICY CMP0079)
    cmake_policy(SET CMP0079 NEW)  # target_link_libraries() allows use with targets in other directories
endif()

# Prevent in-source builds
if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
    message(FATAL_ERROR "In-source builds are not allowed. Please create a separate build directory.")
endif()

# Include modules
include(CMakeDependentOption)
include(CheckIncludeFile)
include(CheckSymbolExists)
include(FeatureSummary)
include(GNUInstallDirs)

# Build options
option(COIN_BUILD_SHARED_LIBS "Build shared library" ON)
option(COIN_BUILD_TESTS "Build and run tests" ON)
option(COIN_BUILD_EXAMPLES "Build example applications" OFF)
option(COIN_BUILD_DOCUMENTATION "Build API documentation" OFF)
option(COIN_THREADSAFE "Enable thread-safe render traversals" OFF)

# Optional features
option(HAVE_NODEKITS "Enable NodeKit support" OFF)
cmake_dependent_option(HAVE_DRAGGERS "Enable Dragger support" OFF "HAVE_NODEKITS" OFF)
cmake_dependent_option(HAVE_MANIPULATORS "Enable Manipulator support" OFF "HAVE_NODEKITS" OFF)

# Backend options
option(COIN3D_USE_OSMESA "Use OSMesa for offscreen rendering" OFF)

# Set C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Set default build type
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    set(CMAKE_BUILD_TYPE Release CACHE STRING "Choose the type of build" FORCE)
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS Debug Release RelWithDebInfo MinSizeRel)
endif()

# Output directories
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib) 
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# Find required dependencies
find_package(Threads REQUIRED)

# OpenGL backend selection
if(COIN3D_USE_OSMESA)
    # OSMesa for headless rendering
    find_path(OSMesa_INCLUDE_DIR GL/osmesa.h)
    find_library(OSMesa_LIBRARY OSMesa)
    if(OSMesa_INCLUDE_DIR AND OSMesa_LIBRARY)
        add_library(OSMesa::OSMesa UNKNOWN IMPORTED)
        set_target_properties(OSMesa::OSMesa PROPERTIES
            IMPORTED_LOCATION ${OSMesa_LIBRARY}
            INTERFACE_INCLUDE_DIRECTORIES ${OSMesa_INCLUDE_DIR}
        )
        message(STATUS "Using OSMesa for offscreen rendering")
    else()
        message(FATAL_ERROR "OSMesa not found")
    endif()
else()
    # System OpenGL (default)
    find_package(OpenGL REQUIRED)
    if(UNIX AND NOT APPLE)
        find_package(X11 REQUIRED)
    endif()
    message(STATUS "Using system OpenGL")
endif()

# Platform-specific setup
if(WIN32)
    set(COIN_SYSTEM_LIBRARY_NAME "Coin${PROJECT_VERSION_MAJOR}")
elseif(APPLE)
    set(CMAKE_MACOSX_RPATH ON)
    set(COIN_SYSTEM_LIBRARY_NAME "Coin")
else()
    set(COIN_SYSTEM_LIBRARY_NAME "Coin")
endif()

# Configure headers that need generation
# Create the Inventor/C directory in the build tree
execute_process(COMMAND ${CMAKE_COMMAND} -E make_directory "${CMAKE_CURRENT_BINARY_DIR}/include/Inventor/C")
execute_process(COMMAND ${CMAKE_COMMAND} -E make_directory "${CMAKE_CURRENT_BINARY_DIR}/include/Inventor/system")

# Set up variables needed for configuration
set(COIN_MAJOR_VERSION 4)
set(COIN_MINOR_VERSION 0)
set(COIN_MICRO_VERSION 5)
set(COIN_BETA_VERSION "")
set(COIN_VERSION "4.0.5")

# GL Headers configuration for different platforms
if(WIN32)
    set(SIM_INCLUDE_WINDOWS_H "#include <windows.h>")
else()
    set(SIM_INCLUDE_WINDOWS_H "/* not windows */")
endif()

if(COIN3D_USE_OSMESA)
    set(SIM_INCLUDE_GL_H "#include <GL/osmesa.h>")
    set(SIM_INCLUDE_GLU_H "/* OSMesa - no GLU */")
else()
    set(SIM_INCLUDE_GL_H "#include <GL/gl.h>")
    set(SIM_INCLUDE_GLU_H "#include <GL/glu.h>")
endif()
set(SIM_INCLUDE_GLEXT_H "#include <GL/glext.h>")

# Configure config header
configure_file(
    "${CMAKE_CURRENT_SOURCE_DIR}/cmake_modern/config.h.in"
    "${CMAKE_CURRENT_BINARY_DIR}/include/config.h"
    @ONLY
)

# Configure basic header
configure_file(
    "${CMAKE_CURRENT_SOURCE_DIR}/include/Inventor/C/basic.h.cmake.in"
    "${CMAKE_CURRENT_BINARY_DIR}/include/Inventor/C/basic.h"
    @ONLY
)

# Configure OpenGL headers
configure_file(
    "${CMAKE_CURRENT_SOURCE_DIR}/include/Inventor/system/gl-headers.h.cmake.in"
    "${CMAKE_CURRENT_BINARY_DIR}/include/Inventor/system/gl-headers.h"
    @ONLY
)

# Define the main library target
if(COIN_BUILD_SHARED_LIBS)
    add_library(Coin SHARED)
    target_compile_definitions(Coin PRIVATE COIN_MAKE_DLL)
    if(WIN32)
        target_compile_definitions(Coin INTERFACE COIN_DLL)
    endif()
else()
    add_library(Coin STATIC)
    if(WIN32)
        target_compile_definitions(Coin INTERFACE COIN_NOT_DLL)
    endif()
endif()

# Library naming
if(COIN3D_USE_OSMESA)
    set_target_properties(Coin PROPERTIES OUTPUT_NAME "Coin-osmesa")
    target_compile_definitions(Coin PRIVATE COIN3D_OSMESA_BUILD USE_MGL_NAMESPACE)
endif()

# Include directories
target_include_directories(Coin
    PUBLIC
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
        $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include>
        $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
    PRIVATE
        ${CMAKE_CURRENT_SOURCE_DIR}/src
        ${CMAKE_CURRENT_SOURCE_DIR}/include/Inventor/annex
)

# Compiler definitions
target_compile_definitions(Coin
    PRIVATE
        HAVE_CONFIG_H
        COIN_INTERNAL
        $<$<CONFIG:Debug>:COIN_DEBUG=1>
        $<$<NOT:$<CONFIG:Debug>>:COIN_DEBUG=0>
)

# Link libraries
target_link_libraries(Coin
    PUBLIC
        Threads::Threads
    PRIVATE
        $<$<BOOL:${COIN3D_USE_OSMESA}>:OSMesa::OSMesa>
        $<$<NOT:$<BOOL:${COIN3D_USE_OSMESA}>>:OpenGL::GL>
        $<$<AND:$<NOT:$<BOOL:${COIN3D_USE_OSMESA}>>,$<TARGET_EXISTS:OpenGL::GLU>>:OpenGL::GLU>
        $<$<AND:$<PLATFORM_ID:Linux>,$<NOT:$<BOOL:${COIN3D_USE_OSMESA}>>>:${X11_LIBRARIES}>
)

# Add source files from subdirectories
include(cmake_modern/CoinSources.cmake)

# Set compiler warnings
if(MSVC)
    target_compile_options(Coin PRIVATE /W3 /EHsc)
    if(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 19.14)
        target_compile_options(Coin PRIVATE /permissive-)
    endif()
else()
    target_compile_options(Coin PRIVATE 
        -Wall -Wextra -Wno-unused-parameter
        $<$<PLATFORM_ID:Darwin>:-Wno-deprecated-declarations>
    )
endif()

# Install targets
install(TARGETS Coin
    EXPORT CoinTargets
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
    INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)

# Install headers
install(DIRECTORY include/
    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
    FILES_MATCHING PATTERN "*.h"
)

install(FILES ${CMAKE_CURRENT_BINARY_DIR}/include/config.h
    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)

# Export targets
install(EXPORT CoinTargets
    FILE CoinTargets.cmake
    NAMESPACE Coin::
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/Coin
)

# Generate config files for find_package()
include(CMakePackageConfigHelpers)

configure_package_config_file(
    "${CMAKE_CURRENT_SOURCE_DIR}/cmake_modern/CoinConfig.cmake.in"
    "${CMAKE_CURRENT_BINARY_DIR}/CoinConfig.cmake"
    INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/Coin
)

write_basic_package_version_file(
    "${CMAKE_CURRENT_BINARY_DIR}/CoinConfigVersion.cmake"
    VERSION ${PROJECT_VERSION}
    COMPATIBILITY SameMajorVersion
)

install(FILES
    "${CMAKE_CURRENT_BINARY_DIR}/CoinConfig.cmake"
    "${CMAKE_CURRENT_BINARY_DIR}/CoinConfigVersion.cmake"
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/Coin
)

# Optional subdirectories
if(COIN_BUILD_EXAMPLES)
    add_subdirectory(examples)
endif()

if(COIN_BUILD_TESTS)
    enable_testing()
    add_subdirectory(tests_modern)
endif()

if(COIN_BUILD_DOCUMENTATION)
    add_subdirectory(docs)
endif()

# Feature summary
feature_summary(WHAT ALL)